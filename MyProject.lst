;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/15/2025 1:45:29 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2972      	GOTO       370
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A8      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A9      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A4      	MOVWF      36
0x000D	0x0871      	MOVF       R1, 0
0x000E	0x00A3      	MOVWF      35
0x000F	0x0872      	MOVF       R2, 0
0x0010	0x00A2      	MOVWF      34
0x0011	0x0873      	MOVF       R3, 0
0x0012	0x00A1      	MOVWF      33
0x0013	0x0874      	MOVF       R4, 0
0x0014	0x00A0      	MOVWF      32
;MyProject.c,38 :: 		interrupt() {
;MyProject.c,39 :: 		while (!(PORTB & LINE_SENSOR) && !(PORTB & LINE_SENSOR2)) {
L_interrupt0:
0x0015	0x1906      	BTFSC      PORTB, 2
0x0016	0x281D      	GOTO       L_interrupt1
0x0017	0x1986      	BTFSC      PORTB, 3
0x0018	0x281D      	GOTO       L_interrupt1
L__interrupt38:
;MyProject.c,41 :: 		lineSensorsTriggered = 1;
0x0019	0x3001      	MOVLW      1
0x001A	0x00A5      	MOVWF      _lineSensorsTriggered
;MyProject.c,42 :: 		moveBackward();
0x001B	0x214B      	CALL       _moveBackward
;MyProject.c,43 :: 		}
0x001C	0x2815      	GOTO       L_interrupt0
L_interrupt1:
;MyProject.c,44 :: 		lineSensorsTriggered = 0;
0x001D	0x01A5      	CLRF       _lineSensorsTriggered
;MyProject.c,45 :: 		INTCON &= ~0x02;  // Clear interrupt flag (RBIF)
0x001E	0x108B      	BCF        INTCON, 1
;MyProject.c,46 :: 		}
L_end_interrupt:
L__interrupt41:
0x001F	0x0824      	MOVF       36, 0
0x0020	0x00F0      	MOVWF      R0
0x0021	0x0823      	MOVF       35, 0
0x0022	0x00F1      	MOVWF      R1
0x0023	0x0822      	MOVF       34, 0
0x0024	0x00F2      	MOVWF      R2
0x0025	0x0821      	MOVF       33, 0
0x0026	0x00F3      	MOVWF      R3
0x0027	0x0820      	MOVF       32, 0
0x0028	0x00F4      	MOVWF      R4
0x0029	0x0829      	MOVF       ___savePCLATH, 0
0x002A	0x008A      	MOVWF      PCLATH
0x002B	0x0E28      	SWAPF      ___saveSTATUS, 0
0x002C	0x0083      	MOVWF      STATUS
0x002D	0x0EFF      	SWAPF      R15, 1
0x002E	0x0E7F      	SWAPF      R15, 0
0x002F	0x0009      	RETFIE
; end of _interrupt
_adel2_delay:
;MyProject.c,203 :: 		void adel2_delay(unsigned int ms) {
;MyProject.c,205 :: 		for (i = 0; i < ms; i++) {
0x0030	0x1283      	BCF        STATUS, 5
0x0031	0x1303      	BCF        STATUS, 6
0x0032	0x01F1      	CLRF       R1
0x0033	0x01F2      	CLRF       R1+1
L_adel2_delay29:
0x0034	0x0831      	MOVF       FARG_adel2_delay_ms+1, 0
0x0035	0x0272      	SUBWF      R1+1, 0
0x0036	0x1D03      	BTFSS      STATUS, 2
0x0037	0x283A      	GOTO       L__adel2_delay61
0x0038	0x0830      	MOVF       FARG_adel2_delay_ms, 0
0x0039	0x0271      	SUBWF      R1, 0
L__adel2_delay61:
0x003A	0x1803      	BTFSC      STATUS, 0
0x003B	0x284F      	GOTO       L_adel2_delay30
;MyProject.c,206 :: 		for (j = 0; j < 111; j++) NOP();
0x003C	0x01F3      	CLRF       R3
0x003D	0x01F4      	CLRF       R3+1
L_adel2_delay32:
0x003E	0x3000      	MOVLW      0
0x003F	0x0274      	SUBWF      R3+1, 0
0x0040	0x1D03      	BTFSS      STATUS, 2
0x0041	0x2844      	GOTO       L__adel2_delay62
0x0042	0x306F      	MOVLW      111
0x0043	0x0273      	SUBWF      R3, 0
L__adel2_delay62:
0x0044	0x1803      	BTFSC      STATUS, 0
0x0045	0x284B      	GOTO       L_adel2_delay33
0x0046	0x0000      	NOP
0x0047	0x0AF3      	INCF       R3, 1
0x0048	0x1903      	BTFSC      STATUS, 2
0x0049	0x0AF4      	INCF       R3+1, 1
0x004A	0x283E      	GOTO       L_adel2_delay32
L_adel2_delay33:
;MyProject.c,205 :: 		for (i = 0; i < ms; i++) {
0x004B	0x0AF1      	INCF       R1, 1
0x004C	0x1903      	BTFSC      STATUS, 2
0x004D	0x0AF2      	INCF       R1+1, 1
;MyProject.c,207 :: 		}
0x004E	0x2834      	GOTO       L_adel2_delay29
L_adel2_delay30:
;MyProject.c,208 :: 		}
L_end_adel2_delay:
0x004F	0x0008      	RETURN
; end of _adel2_delay
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0050	0x1283      	BCF        STATUS, 5
0x0051	0x1303      	BCF        STATUS, 6
0x0052	0x0827      	MOVF       ___DoICPAddr+1, 0
0x0053	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0054	0x0826      	MOVF       ___DoICPAddr, 0
0x0055	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0056	0x0008      	RETURN
; end of _____DoICP
_adel_us_delay:
;MyProject.c,210 :: 		void adel_us_delay(unsigned int us) {
;MyProject.c,212 :: 		for (i = 0; i < us; i++) NOP(); NOP(); NOP(); NOP();
0x0057	0x1283      	BCF        STATUS, 5
0x0058	0x1303      	BCF        STATUS, 6
0x0059	0x01F1      	CLRF       R1
0x005A	0x01F2      	CLRF       R1+1
L_adel_us_delay35:
0x005B	0x082F      	MOVF       FARG_adel_us_delay_us+1, 0
0x005C	0x0272      	SUBWF      R1+1, 0
0x005D	0x1D03      	BTFSS      STATUS, 2
0x005E	0x2861      	GOTO       L__adel_us_delay64
0x005F	0x082E      	MOVF       FARG_adel_us_delay_us, 0
0x0060	0x0271      	SUBWF      R1, 0
L__adel_us_delay64:
0x0061	0x1803      	BTFSC      STATUS, 0
0x0062	0x2868      	GOTO       L_adel_us_delay36
0x0063	0x0000      	NOP
0x0064	0x0AF1      	INCF       R1, 1
0x0065	0x1903      	BTFSC      STATUS, 2
0x0066	0x0AF2      	INCF       R1+1, 1
0x0067	0x285B      	GOTO       L_adel_us_delay35
L_adel_us_delay36:
0x0068	0x0000      	NOP
0x0069	0x0000      	NOP
0x006A	0x0000      	NOP
;MyProject.c,213 :: 		}
L_end_adel_us_delay:
0x006B	0x0008      	RETURN
; end of _adel_us_delay
_adel_delay:
;MyProject.c,197 :: 		void adel_delay(unsigned int ms) {
;MyProject.c,199 :: 		for (i = 0; i < ms; i++) {
0x006C	0x1283      	BCF        STATUS, 5
0x006D	0x1303      	BCF        STATUS, 6
0x006E	0x01F1      	CLRF       R1
0x006F	0x01F2      	CLRF       R1+1
L_adel_delay23:
0x0070	0x082F      	MOVF       FARG_adel_delay_ms+1, 0
0x0071	0x0272      	SUBWF      R1+1, 0
0x0072	0x1D03      	BTFSS      STATUS, 2
0x0073	0x2876      	GOTO       L__adel_delay58
0x0074	0x082E      	MOVF       FARG_adel_delay_ms, 0
0x0075	0x0271      	SUBWF      R1, 0
L__adel_delay58:
0x0076	0x1803      	BTFSC      STATUS, 0
0x0077	0x288B      	GOTO       L_adel_delay24
;MyProject.c,200 :: 		for (j = 0; j < 111; j++) NOP();
0x0078	0x01F3      	CLRF       R3
0x0079	0x01F4      	CLRF       R3+1
L_adel_delay26:
0x007A	0x3000      	MOVLW      0
0x007B	0x0274      	SUBWF      R3+1, 0
0x007C	0x1D03      	BTFSS      STATUS, 2
0x007D	0x2880      	GOTO       L__adel_delay59
0x007E	0x306F      	MOVLW      111
0x007F	0x0273      	SUBWF      R3, 0
L__adel_delay59:
0x0080	0x1803      	BTFSC      STATUS, 0
0x0081	0x2887      	GOTO       L_adel_delay27
0x0082	0x0000      	NOP
0x0083	0x0AF3      	INCF       R3, 1
0x0084	0x1903      	BTFSC      STATUS, 2
0x0085	0x0AF4      	INCF       R3+1, 1
0x0086	0x287A      	GOTO       L_adel_delay26
L_adel_delay27:
;MyProject.c,199 :: 		for (i = 0; i < ms; i++) {
0x0087	0x0AF1      	INCF       R1, 1
0x0088	0x1903      	BTFSC      STATUS, 2
0x0089	0x0AF2      	INCF       R1+1, 1
;MyProject.c,201 :: 		}
0x008A	0x2870      	GOTO       L_adel_delay23
L_adel_delay24:
;MyProject.c,202 :: 		}
L_end_adel_delay:
0x008B	0x0008      	RETURN
; end of _adel_delay
_Div_16X16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x008C	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x008D	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x008E	0x01F8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x008F	0x01F9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x0090	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x0091	0x00FC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x0092	0x0D71      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x0093	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x0094	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x0095	0x0874      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x0096	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x0097	0x0875      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x0098	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x0099	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x009A	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x009B	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x009C	0x28A4      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x009D	0x0874      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x009E	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x009F	0x0875      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x00A0	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x00A1	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x00A2	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x00A3	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x00A4	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x00A5	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x00A6	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x00A7	0x2892      	GOTO       $-21
;__Lib_Math.c,251 :: 		
L_end_Div_16X16_U:
0x00A8	0x0008      	RETURN
; end of _Div_16X16_U
_initPWM:
;MyProject.c,104 :: 		void initPWM() {
;MyProject.c,106 :: 		T2CON = 0x04;  // Enable Timer2 with a prescaler of 1:1
0x00A9	0x3004      	MOVLW      4
0x00AA	0x1283      	BCF        STATUS, 5
0x00AB	0x1303      	BCF        STATUS, 6
0x00AC	0x0092      	MOVWF      T2CON
;MyProject.c,107 :: 		PR2 = 0xFF;    // Set the period register for PWM frequency control
0x00AD	0x30FF      	MOVLW      255
0x00AE	0x1683      	BSF        STATUS, 5
0x00AF	0x0092      	MOVWF      PR2
;MyProject.c,108 :: 		TMR2 = 0x00;   // Clear Timer2
0x00B0	0x1283      	BCF        STATUS, 5
0x00B1	0x0191      	CLRF       TMR2
;MyProject.c,111 :: 		CCP1CON = 0x0C;  // PWM mode for CCP1 (RC2)
0x00B2	0x300C      	MOVLW      12
0x00B3	0x0097      	MOVWF      CCP1CON
;MyProject.c,112 :: 		CCP2CON = 0x0C;  // PWM mode for CCP2 (RC1)
0x00B4	0x300C      	MOVLW      12
0x00B5	0x009D      	MOVWF      CCP2CON
;MyProject.c,115 :: 		T2CON |= 0x04;  // Set the TMR2ON bit
0x00B6	0x1512      	BSF        T2CON, 2
;MyProject.c,116 :: 		}
L_end_initPWM:
0x00B7	0x0008      	RETURN
; end of _initPWM
_searchAround:
;MyProject.c,160 :: 		void searchAround() {
;MyProject.c,161 :: 		PORTD = LEFT_MOTOR_FORWARD | REAR_LEFT_FORWARD | RIGHT_MOTOR_BACKWARD | REAR_RIGHT_BACKWARD;
0x00B8	0x3099      	MOVLW      153
0x00B9	0x1283      	BCF        STATUS, 5
0x00BA	0x1303      	BCF        STATUS, 6
0x00BB	0x0088      	MOVWF      PORTD
;MyProject.c,162 :: 		adel_delay(500);
0x00BC	0x30F4      	MOVLW      244
0x00BD	0x00AE      	MOVWF      FARG_adel_delay_ms
0x00BE	0x3001      	MOVLW      1
0x00BF	0x00AF      	MOVWF      FARG_adel_delay_ms+1
0x00C0	0x206C      	CALL       _adel_delay
;MyProject.c,163 :: 		}
L_end_searchAround:
0x00C1	0x0008      	RETURN
; end of _searchAround
_readPotentiometer:
;MyProject.c,127 :: 		unsigned int readPotentiometer() {
;MyProject.c,128 :: 		ADCON0 &= 0xC7;                     // Select Channel 0 (POTENTIOMETER_CHANNEL)
0x00C2	0x30C7      	MOVLW      199
0x00C3	0x1283      	BCF        STATUS, 5
0x00C4	0x1303      	BCF        STATUS, 6
0x00C5	0x059F      	ANDWF      ADCON0, 1
;MyProject.c,129 :: 		ADCON0 |= (POTENTIOMETER_CHANNEL << 3); // Set ADC channel
;MyProject.c,130 :: 		adel_us_delay(20);                  // Acquisition time
0x00C6	0x3014      	MOVLW      20
0x00C7	0x00AE      	MOVWF      FARG_adel_us_delay_us
0x00C8	0x3000      	MOVLW      0
0x00C9	0x00AF      	MOVWF      FARG_adel_us_delay_us+1
0x00CA	0x2057      	CALL       _adel_us_delay
;MyProject.c,131 :: 		ADCON0 |= 0x04;                     // Set the GO/DONE bit to start conversion
0x00CB	0x151F      	BSF        ADCON0, 2
;MyProject.c,132 :: 		while (ADCON0 & 0x04);              // Wait for the GO/DONE bit to clear
L_readPotentiometer15:
0x00CC	0x1D1F      	BTFSS      ADCON0, 2
0x00CD	0x28CF      	GOTO       L_readPotentiometer16
0x00CE	0x28CC      	GOTO       L_readPotentiometer15
L_readPotentiometer16:
;MyProject.c,133 :: 		return ((ADRESH << 8) | ADRESL);    // Combine ADRESH and ADRESL for 10-bit ADC result
0x00CF	0x081E      	MOVF       ADRESH, 0
0x00D0	0x00F1      	MOVWF      R0+1
0x00D1	0x01F0      	CLRF       R0
0x00D2	0x1683      	BSF        STATUS, 5
0x00D3	0x081E      	MOVF       ADRESL, 0
0x00D4	0x04F0      	IORWF      R0, 1
0x00D5	0x3000      	MOVLW      0
0x00D6	0x04F1      	IORWF      R0+1, 1
;MyProject.c,134 :: 		}
L_end_readPotentiometer:
0x00D7	0x0008      	RETURN
; end of _readPotentiometer
_readUltrasonic:
;MyProject.c,166 :: 		unsigned int readUltrasonic() {
;MyProject.c,167 :: 		unsigned int time = 0;
;MyProject.c,170 :: 		PORTB |= TRIG;
0x00D8	0x1283      	BCF        STATUS, 5
0x00D9	0x1303      	BCF        STATUS, 6
0x00DA	0x1406      	BSF        PORTB, 0
;MyProject.c,171 :: 		adel_us_delay(10);
0x00DB	0x300A      	MOVLW      10
0x00DC	0x00AE      	MOVWF      FARG_adel_us_delay_us
0x00DD	0x3000      	MOVLW      0
0x00DE	0x00AF      	MOVWF      FARG_adel_us_delay_us+1
0x00DF	0x2057      	CALL       _adel_us_delay
;MyProject.c,172 :: 		PORTB &= ~TRIG;
0x00E0	0x1006      	BCF        PORTB, 0
;MyProject.c,174 :: 		timeout = 0xFFFF;
0x00E1	0x30FF      	MOVLW      255
0x00E2	0x00AC      	MOVWF      readUltrasonic_timeout_L0
0x00E3	0x30FF      	MOVLW      255
0x00E4	0x00AD      	MOVWF      readUltrasonic_timeout_L0+1
;MyProject.c,175 :: 		while (!(PORTB & ECHO)) {
L_readUltrasonic17:
0x00E5	0x1886      	BTFSC      PORTB, 1
0x00E6	0x28F7      	GOTO       L_readUltrasonic18
;MyProject.c,176 :: 		if (--timeout == 0) return 0;
0x00E7	0x3001      	MOVLW      1
0x00E8	0x02AC      	SUBWF      readUltrasonic_timeout_L0, 1
0x00E9	0x1C03      	BTFSS      STATUS, 0
0x00EA	0x03AD      	DECF       readUltrasonic_timeout_L0+1, 1
0x00EB	0x3000      	MOVLW      0
0x00EC	0x062D      	XORWF      readUltrasonic_timeout_L0+1, 0
0x00ED	0x1D03      	BTFSS      STATUS, 2
0x00EE	0x28F1      	GOTO       L__readUltrasonic55
0x00EF	0x3000      	MOVLW      0
0x00F0	0x062C      	XORWF      readUltrasonic_timeout_L0, 0
L__readUltrasonic55:
0x00F1	0x1D03      	BTFSS      STATUS, 2
0x00F2	0x28F6      	GOTO       L_readUltrasonic19
0x00F3	0x01F0      	CLRF       R0
0x00F4	0x01F1      	CLRF       R0+1
0x00F5	0x291F      	GOTO       L_end_readUltrasonic
L_readUltrasonic19:
;MyProject.c,177 :: 		}
0x00F6	0x28E5      	GOTO       L_readUltrasonic17
L_readUltrasonic18:
;MyProject.c,179 :: 		TMR1H = 0; TMR1L = 0;
0x00F7	0x018F      	CLRF       TMR1H
0x00F8	0x018E      	CLRF       TMR1L
;MyProject.c,180 :: 		T1CON = 0x01;
0x00F9	0x3001      	MOVLW      1
0x00FA	0x0090      	MOVWF      T1CON
;MyProject.c,182 :: 		timeout = 0xFFFF;
0x00FB	0x30FF      	MOVLW      255
0x00FC	0x00AC      	MOVWF      readUltrasonic_timeout_L0
0x00FD	0x30FF      	MOVLW      255
0x00FE	0x00AD      	MOVWF      readUltrasonic_timeout_L0+1
;MyProject.c,183 :: 		while (PORTB & ECHO) {
L_readUltrasonic20:
0x00FF	0x1C86      	BTFSS      PORTB, 1
0x0100	0x2912      	GOTO       L_readUltrasonic21
;MyProject.c,184 :: 		if (--timeout == 0) {
0x0101	0x3001      	MOVLW      1
0x0102	0x02AC      	SUBWF      readUltrasonic_timeout_L0, 1
0x0103	0x1C03      	BTFSS      STATUS, 0
0x0104	0x03AD      	DECF       readUltrasonic_timeout_L0+1, 1
0x0105	0x3000      	MOVLW      0
0x0106	0x062D      	XORWF      readUltrasonic_timeout_L0+1, 0
0x0107	0x1D03      	BTFSS      STATUS, 2
0x0108	0x290B      	GOTO       L__readUltrasonic56
0x0109	0x3000      	MOVLW      0
0x010A	0x062C      	XORWF      readUltrasonic_timeout_L0, 0
L__readUltrasonic56:
0x010B	0x1D03      	BTFSS      STATUS, 2
0x010C	0x2911      	GOTO       L_readUltrasonic22
;MyProject.c,185 :: 		T1CON = 0x00;
0x010D	0x0190      	CLRF       T1CON
;MyProject.c,186 :: 		return 0;
0x010E	0x01F0      	CLRF       R0
0x010F	0x01F1      	CLRF       R0+1
0x0110	0x291F      	GOTO       L_end_readUltrasonic
;MyProject.c,187 :: 		}
L_readUltrasonic22:
;MyProject.c,188 :: 		}
0x0111	0x28FF      	GOTO       L_readUltrasonic20
L_readUltrasonic21:
;MyProject.c,190 :: 		T1CON = 0x00;
0x0112	0x0190      	CLRF       T1CON
;MyProject.c,191 :: 		time = (TMR1H << 8) | TMR1L;
0x0113	0x080F      	MOVF       TMR1H, 0
0x0114	0x00F1      	MOVWF      R0+1
0x0115	0x01F0      	CLRF       R0
0x0116	0x080E      	MOVF       TMR1L, 0
0x0117	0x04F0      	IORWF      R0, 1
0x0118	0x3000      	MOVLW      0
0x0119	0x04F1      	IORWF      R0+1, 1
;MyProject.c,193 :: 		return time / 58;
0x011A	0x303A      	MOVLW      58
0x011B	0x00F4      	MOVWF      R4
0x011C	0x3000      	MOVLW      0
0x011D	0x00F5      	MOVWF      R4+1
0x011E	0x208C      	CALL       _Div_16X16_U
;MyProject.c,194 :: 		}
L_end_readUltrasonic:
0x011F	0x0008      	RETURN
; end of _readUltrasonic
_moveBackwardLeft:
;MyProject.c,154 :: 		void moveBackwardLeft() {
;MyProject.c,155 :: 		PORTD = RIGHT_MOTOR_BACKWARD | REAR_RIGHT_BACKWARD | LEFT_MOTOR_FORWARD | REAR_LEFT_FORWARD;
0x0120	0x3099      	MOVLW      153
0x0121	0x1283      	BCF        STATUS, 5
0x0122	0x1303      	BCF        STATUS, 6
0x0123	0x0088      	MOVWF      PORTD
;MyProject.c,156 :: 		adel_delay(500);
0x0124	0x30F4      	MOVLW      244
0x0125	0x00AE      	MOVWF      FARG_adel_delay_ms
0x0126	0x3001      	MOVLW      1
0x0127	0x00AF      	MOVWF      FARG_adel_delay_ms+1
0x0128	0x206C      	CALL       _adel_delay
;MyProject.c,157 :: 		}
L_end_moveBackwardLeft:
0x0129	0x0008      	RETURN
; end of _moveBackwardLeft
_init:
;MyProject.c,91 :: 		void init() {
;MyProject.c,92 :: 		TRISB = 0x0E;  // Set RB1 (ECHO), RB2 (LINE_SENSOR), and RB3 (LINE_SENSOR2) as inputs
0x012A	0x300E      	MOVLW      14
0x012B	0x1683      	BSF        STATUS, 5
0x012C	0x1303      	BCF        STATUS, 6
0x012D	0x0086      	MOVWF      TRISB
;MyProject.c,93 :: 		TRISD = 0x00;  // Set RD0-RD7 as outputs for motor control
0x012E	0x0188      	CLRF       TRISD
;MyProject.c,94 :: 		TRISA = 0xFF;  // Set PORTA as input for ADC
0x012F	0x30FF      	MOVLW      255
0x0130	0x0085      	MOVWF      TRISA
;MyProject.c,95 :: 		TRISC = 0xF9;  // Set RC1 and RC2 as outputs (PWM pins)
0x0131	0x30F9      	MOVLW      249
0x0132	0x0087      	MOVWF      TRISC
;MyProject.c,97 :: 		ADCON0 = 0x41; // Configure ADC: Channel 0, ADC enabled
0x0133	0x3041      	MOVLW      65
0x0134	0x1283      	BCF        STATUS, 5
0x0135	0x009F      	MOVWF      ADCON0
;MyProject.c,98 :: 		ADCON1 = 0x80; // Configure result to be right-justified for 10-bit ADC
0x0136	0x3080      	MOVLW      128
0x0137	0x1683      	BSF        STATUS, 5
0x0138	0x009F      	MOVWF      ADCON1
;MyProject.c,99 :: 		T1CON = 0x00;  // Disable Timer1 initially
0x0139	0x1283      	BCF        STATUS, 5
0x013A	0x0190      	CLRF       T1CON
;MyProject.c,101 :: 		}
L_end_init:
0x013B	0x0008      	RETURN
; end of _init
_moveBackwardRight:
;MyProject.c,148 :: 		void moveBackwardRight() {
;MyProject.c,149 :: 		PORTD = LEFT_MOTOR_BACKWARD | REAR_LEFT_BACKWARD | RIGHT_MOTOR_FORWARD | REAR_RIGHT_FORWARD;
0x013C	0x3066      	MOVLW      102
0x013D	0x1283      	BCF        STATUS, 5
0x013E	0x1303      	BCF        STATUS, 6
0x013F	0x0088      	MOVWF      PORTD
;MyProject.c,150 :: 		adel_delay(500);
0x0140	0x30F4      	MOVLW      244
0x0141	0x00AE      	MOVWF      FARG_adel_delay_ms
0x0142	0x3001      	MOVLW      1
0x0143	0x00AF      	MOVWF      FARG_adel_delay_ms+1
0x0144	0x206C      	CALL       _adel_delay
;MyProject.c,151 :: 		}
L_end_moveBackwardRight:
0x0145	0x0008      	RETURN
; end of _moveBackwardRight
_moveForward:
;MyProject.c,137 :: 		void moveForward() {
;MyProject.c,138 :: 		PORTD = LEFT_MOTOR_FORWARD | RIGHT_MOTOR_FORWARD | REAR_LEFT_FORWARD | REAR_RIGHT_FORWARD;
0x0146	0x3055      	MOVLW      85
0x0147	0x1283      	BCF        STATUS, 5
0x0148	0x1303      	BCF        STATUS, 6
0x0149	0x0088      	MOVWF      PORTD
;MyProject.c,139 :: 		}
L_end_moveForward:
0x014A	0x0008      	RETURN
; end of _moveForward
_moveBackward:
;MyProject.c,142 :: 		void moveBackward() {
;MyProject.c,143 :: 		PORTD = LEFT_MOTOR_BACKWARD | RIGHT_MOTOR_BACKWARD | REAR_LEFT_BACKWARD | REAR_RIGHT_BACKWARD;
0x014B	0x30AA      	MOVLW      170
0x014C	0x1283      	BCF        STATUS, 5
0x014D	0x1303      	BCF        STATUS, 6
0x014E	0x0088      	MOVWF      PORTD
;MyProject.c,144 :: 		adel2_delay(500);
0x014F	0x30F4      	MOVLW      244
0x0150	0x00B0      	MOVWF      FARG_adel2_delay_ms
0x0151	0x3001      	MOVLW      1
0x0152	0x00B1      	MOVWF      FARG_adel2_delay_ms+1
0x0153	0x2030      	CALL       _adel2_delay
;MyProject.c,145 :: 		}
L_end_moveBackward:
0x0154	0x0008      	RETURN
; end of _moveBackward
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0155	0x2050      	CALL       _____DoICP
0x0156	0x118A      	BCF        PCLATH, 3
0x0157	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0158	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0159	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x015A	0x0AA6      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x015B	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x015C	0x0AA7      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x015D	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x015E	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x015F	0x2955      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0160	0x0008      	RETURN
; end of ___CC2DW
_setMotorSpeed:
;MyProject.c,119 :: 		void setMotorSpeed(unsigned int speed) {
;MyProject.c,120 :: 		unsigned char pwm_value = speed / 4;  // Scale 10-bit ADC to 8-bit PWM (0-255)
0x0161	0x1283      	BCF        STATUS, 5
0x0162	0x1303      	BCF        STATUS, 6
0x0163	0x082C      	MOVF       FARG_setMotorSpeed_speed, 0
0x0164	0x00F0      	MOVWF      R0
0x0165	0x082D      	MOVF       FARG_setMotorSpeed_speed+1, 0
0x0166	0x00F1      	MOVWF      R0+1
0x0167	0x0CF1      	RRF        R0+1, 1
0x0168	0x0CF0      	RRF        R0, 1
0x0169	0x13F1      	BCF        R0+1, 7
0x016A	0x0CF1      	RRF        R0+1, 1
0x016B	0x0CF0      	RRF        R0, 1
0x016C	0x13F1      	BCF        R0+1, 7
;MyProject.c,122 :: 		CCPR1L = pwm_value;  // Set duty cycle for left motor (RC2)
0x016D	0x0870      	MOVF       R0, 0
0x016E	0x0095      	MOVWF      CCPR1L
;MyProject.c,123 :: 		CCPR2L = pwm_value;  // Set duty cycle for right motor (RC1)
0x016F	0x0870      	MOVF       R0, 0
0x0170	0x009B      	MOVWF      CCPR2L
;MyProject.c,124 :: 		}
L_end_setMotorSpeed:
0x0171	0x0008      	RETURN
; end of _setMotorSpeed
_main:
0x0172	0x1283      	BCF        STATUS, 5
0x0173	0x1303      	BCF        STATUS, 6
0x0174	0x01A5      	CLRF       _lineSensorsTriggered
;MyProject.c,49 :: 		void main() {
;MyProject.c,52 :: 		adel_delay(5000);  // Startup delay
0x0175	0x3088      	MOVLW      136
0x0176	0x00AE      	MOVWF      FARG_adel_delay_ms
0x0177	0x3013      	MOVLW      19
0x0178	0x00AF      	MOVWF      FARG_adel_delay_ms+1
0x0179	0x206C      	CALL       _adel_delay
;MyProject.c,53 :: 		init();            // Initialize all configurations.
0x017A	0x212A      	CALL       _init
;MyProject.c,54 :: 		initPWM();         // Initialize PWM
0x017B	0x20A9      	CALL       _initPWM
;MyProject.c,55 :: 		INTCON |= 0x90;    // Enable global and RB port change interrupts
0x017C	0x3090      	MOVLW      144
0x017D	0x048B      	IORWF      INTCON, 1
;MyProject.c,57 :: 		while (1) {
L_main4:
;MyProject.c,59 :: 		if (lineSensorsTriggered) {
0x017E	0x0825      	MOVF       _lineSensorsTriggered, 0
0x017F	0x1903      	BTFSC      STATUS, 2
0x0180	0x2982      	GOTO       L_main6
;MyProject.c,60 :: 		continue;  // Skip the rest of the main loop
0x0181	0x297E      	GOTO       L_main4
;MyProject.c,61 :: 		}
L_main6:
;MyProject.c,64 :: 		distance = readUltrasonic();
0x0182	0x20D8      	CALL       _readUltrasonic
0x0183	0x0870      	MOVF       R0, 0
0x0184	0x00AA      	MOVWF      main_distance_L0
0x0185	0x0871      	MOVF       R0+1, 0
0x0186	0x00AB      	MOVWF      main_distance_L0+1
;MyProject.c,65 :: 		potValue = readPotentiometer();
0x0187	0x20C2      	CALL       _readPotentiometer
;MyProject.c,68 :: 		setMotorSpeed(potValue);
0x0188	0x0870      	MOVF       R0, 0
0x0189	0x1283      	BCF        STATUS, 5
0x018A	0x00AC      	MOVWF      FARG_setMotorSpeed_speed
0x018B	0x0871      	MOVF       R0+1, 0
0x018C	0x00AD      	MOVWF      FARG_setMotorSpeed_speed+1
0x018D	0x2161      	CALL       _setMotorSpeed
;MyProject.c,70 :: 		if (distance > 0 && distance < 30) {
0x018E	0x082B      	MOVF       main_distance_L0+1, 0
0x018F	0x3C00      	SUBLW      0
0x0190	0x1D03      	BTFSS      STATUS, 2
0x0191	0x2994      	GOTO       L__main43
0x0192	0x082A      	MOVF       main_distance_L0, 0
0x0193	0x3C00      	SUBLW      0
L__main43:
0x0194	0x1803      	BTFSC      STATUS, 0
0x0195	0x29A1      	GOTO       L_main9
0x0196	0x3000      	MOVLW      0
0x0197	0x022B      	SUBWF      main_distance_L0+1, 0
0x0198	0x1D03      	BTFSS      STATUS, 2
0x0199	0x299C      	GOTO       L__main44
0x019A	0x301E      	MOVLW      30
0x019B	0x022A      	SUBWF      main_distance_L0, 0
L__main44:
0x019C	0x1803      	BTFSC      STATUS, 0
0x019D	0x29A1      	GOTO       L_main9
L__main39:
;MyProject.c,72 :: 		PORTA |= ULTRASONIC_LED;
0x019E	0x1605      	BSF        PORTA, 4
;MyProject.c,73 :: 		moveForward();
0x019F	0x2146      	CALL       _moveForward
;MyProject.c,74 :: 		} else if (PORTB & LINE_SENSOR) {
0x01A0	0x29AB      	GOTO       L_main10
L_main9:
0x01A1	0x1D06      	BTFSS      PORTB, 2
0x01A2	0x29A5      	GOTO       L_main11
;MyProject.c,76 :: 		moveBackwardRight();
0x01A3	0x213C      	CALL       _moveBackwardRight
;MyProject.c,77 :: 		} else if (PORTB & LINE_SENSOR2) {
0x01A4	0x29AB      	GOTO       L_main12
L_main11:
0x01A5	0x1D86      	BTFSS      PORTB, 3
0x01A6	0x29A9      	GOTO       L_main13
;MyProject.c,79 :: 		moveBackwardLeft();
0x01A7	0x2120      	CALL       _moveBackwardLeft
;MyProject.c,80 :: 		} else {
0x01A8	0x29AB      	GOTO       L_main14
L_main13:
;MyProject.c,82 :: 		PORTA &= ~ULTRASONIC_LED;
0x01A9	0x1205      	BCF        PORTA, 4
;MyProject.c,83 :: 		searchAround();
0x01AA	0x20B8      	CALL       _searchAround
;MyProject.c,84 :: 		}
L_main14:
L_main12:
L_main10:
;MyProject.c,86 :: 		adel_delay(100);  // Delay for stability
0x01AB	0x3064      	MOVLW      100
0x01AC	0x00AE      	MOVWF      FARG_adel_delay_ms
0x01AD	0x3000      	MOVLW      0
0x01AE	0x00AF      	MOVWF      FARG_adel_delay_ms+1
0x01AF	0x206C      	CALL       _adel_delay
;MyProject.c,87 :: 		}
0x01B0	0x297E      	GOTO       L_main4
;MyProject.c,88 :: 		}
L_end_main:
0x01B1	0x29B1      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [44]    _interrupt
0x0030      [32]    _adel2_delay
0x0050       [7]    _____DoICP
0x0057      [21]    _adel_us_delay
0x006C      [32]    _adel_delay
0x008C      [29]    _Div_16X16_U
0x00A9      [15]    _initPWM
0x00B8      [10]    _searchAround
0x00C2      [22]    _readPotentiometer
0x00D8      [72]    _readUltrasonic
0x0120      [10]    _moveBackwardLeft
0x012A      [18]    _init
0x013C      [10]    _moveBackwardRight
0x0146       [5]    _moveForward
0x014B      [10]    _moveBackward
0x0155      [12]    ___CC2DW
0x0161      [17]    _setMotorSpeed
0x0172      [64]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0006       [1]    PORTB
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [1]    T1CON
0x0011       [1]    TMR2
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x001B       [1]    CCPR2L
0x001D       [1]    CCP2CON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0025       [1]    _lineSensorsTriggered
0x0026       [2]    ___DoICPAddr
0x0028       [1]    ___saveSTATUS
0x0029       [1]    ___savePCLATH
0x002A       [2]    main_distance_L0
0x002C       [2]    readUltrasonic_timeout_L0
0x002C       [2]    FARG_setMotorSpeed_speed
0x002E       [2]    FARG_adel_delay_ms
0x002E       [2]    FARG_adel_us_delay_us
0x0030       [2]    FARG_adel2_delay_ms
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x0092       [1]    PR2
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
